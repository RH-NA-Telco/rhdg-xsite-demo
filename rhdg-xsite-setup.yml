---
- hosts: localhost
  gather_facts: false
  tasks:
    - name: Create the k8s namespace for RHDG XSite Demo
      community.kubernetes.k8s:
        api_version: v1
        state: present
        host: "{{ item.host }}"
        api_key: "{{ item.api_key }}"
        validate_certs: false
        definition: "{{ lookup('template', 'namespace.yml.j2') | from_yaml }}"
      loop:
        - {name: "{{ site2.locations[0].namespace }}", host: "{{ site1_ocp_api_url }}", api_key: "{{ site1.ocp_api_key }}"}
        - {name: "{{ site1.locations[0].namespace }}", host: "{{ site2_ocp_api_url }}", api_key: "{{ site2.ocp_api_key }}"}

    - name: Create the site service account in the given namespace
      community.kubernetes.k8s:
        state: present
        host: "{{ item.host }}"
        api_key: "{{ item.api_key }}"
        validate_certs: false
        definition: "{{ lookup('template', 'serviceaccount.yml.j2') | from_yaml }}"
      loop:
        - {name: "{{ site1.local.name }}", host: "{{ site1_ocp_api_url }}", api_key: "{{ site1.ocp_api_key }}", namespace: "{{ site2.locations[0].namespace }}"}
        - {name: "{{ site2.local.name }}", host: "{{ site2_ocp_api_url }}", api_key: "{{ site2.ocp_api_key }}", namespace: "{{ site1.locations[0].namespace }}"}
      register: service_accounts

    - name: Get the site1 sa secret name
      set_fact:
        site1_sa_token_secret: "{{ item.name }}"
      loop: "{{ service_accounts.results[0].result.secrets }}"
      when: '"token" in item.name'

    - name: Get the site2 sa secret name
      set_fact:
        site2_sa_token_secret: "{{ item.name }}"
      loop: "{{ service_accounts.results[1].result.secrets }}"
      when: '"token" in item.name'

    - name: Display token secret name
      debug:
        var: "{{ item }}"
        verbosity: 1
      loop:
        - site1_sa_token_secret
        - site2_sa_token_secret

    - name: Get the site1 sa token secret
      community.kubernetes.k8s_info:
        api_version: v1
        host: "{{ site1_ocp_api_url }}"
        api_key: "{{ site1.ocp_api_key }}"
        validate_certs: false
        kind: Secret
        name: "{{ site1_sa_token_secret }}"
        namespace: "{{ site2.locations[0].namespace }}"
        wait: true
      register: site1_sa_token_secret_json

    - name: Get the site2 sa token secret
      community.kubernetes.k8s_info:
        api_version: v1
        host: "{{ site2_ocp_api_url }}"
        validate_certs: false
        api_key: "{{ site2.ocp_api_key }}"
        kind: Secret
        name: "{{ site2_sa_token_secret }}"
        namespace: "{{ site1.locations[0].namespace }}"
        wait: true
      register: site2_sa_token_secret_json

    - name: Display token secret json
      debug:
        var: "{{ item }}"
        verbosity: 1
      loop:
        - site1_sa_token_secret_json
        - site2_sa_token_secret_json

    - name: Set the site1 sa token
      set_fact:
        site1_sa_token: "{{ site1_sa_token_secret_json.resources[0].data.token }}"

    - name: Set the site2 sa token
      set_fact:
        site2_sa_token: "{{ site2_sa_token_secret_json.resources[0].data.token }}"

    - name: Display tokens
      debug:
        var: "{{ item }}"
        verbosity: 1
      loop:
        - site1_sa_token
        - site2_sa_token

    - name: Deploy token to the other site
      community.kubernetes.k8s:
        state: present
        host: "{{ item.host }}"
        api_key: "{{ item.api_key }}"
        validate_certs: false
        definition: "{{ lookup('template', 'secret.yml.j2') | from_yaml }}"
        wait: true
      loop:
        - {namespace: "{{ site2.locations[0].namespace }}", name: "{{ site2.locations[0].secretName }}", token: "{{ site2_sa_token }}", host: "{{ site1_ocp_api_url }}", api_key: "{{ site1.ocp_api_key }}"}
        - {namespace: "{{ site1.locations[0].namespace }}", name: "{{ site1.locations[0].secretName }}", token: "{{ site1_sa_token }}", host: "{{ site2_ocp_api_url }}", api_key: "{{ site2.ocp_api_key }}"}

    - name: Apply view role to the service accounts
      community.kubernetes.k8s:
        state: present
        host: "{{ item.host }}"
        api_key: "{{ item.api_key }}"
        validate_certs: false
        definition: "{{ lookup('template', 'clusterroleview.yml.j2') | from_yaml }}"
        wait: true
      loop:
        - {name: "{{ site1.local.name }}", host: "{{ site1_ocp_api_url }}", api_key: "{{ site1.ocp_api_key }}", namespace: "{{ site2.locations[0].namespace }}"}
        - {name: "{{ site2.local.name }}", host: "{{ site2_ocp_api_url }}", api_key: "{{ site2.ocp_api_key }}", namespace: "{{ site1.locations[0].namespace }}"}

    - name: Apply cluster-reader role to the service accounts
      community.kubernetes.k8s:
        state: present
        host: "{{ item.host }}"
        api_key: "{{ item.api_key }}"
        validate_certs: false
        definition: "{{ lookup('template', 'clusterroleclusterreader.yml.j2') | from_yaml }}"
        wait: true
      loop:
        - {name: "{{ site1.local.name }}", host: "{{ site1_ocp_api_url }}", api_key: "{{ site1.ocp_api_key }}", namespace: "{{ site2.locations[0].namespace }}"}
        - {name: "{{ site2.local.name }}", host: "{{ site2_ocp_api_url }}", api_key: "{{ site2.ocp_api_key }}", namespace: "{{ site1.locations[0].namespace }}"}

    - name: Deploy datagrid operator on both clusters
      community.kubernetes.k8s:
        state: present
        host: "{{ item.host }}"
        api_key: "{{ item.api_key }}"
        validate_certs: false
        definition: "{{ lookup('template', 'subscription.yml.j2') | from_yaml }}"
        wait: true
      loop:
        - {host: "{{ site1_ocp_api_url }}", api_key: "{{ site1.ocp_api_key }}"}
        - {host: "{{ site2_ocp_api_url }}", api_key: "{{ site2.ocp_api_key }}"}

    - name: Deploy Infinispan CR
      community.kubernetes.k8s:
        state: present
        host: "{{ item.host }}"
        api_key: "{{ item.api_key }}"
        validate_certs: false
        definition: "{{ lookup('template', 'infinispan-cr.yml.j2') | from_yaml }}"
        wait: true
      loop:
        - {host: "{{ site1_ocp_api_url }}", api_key: "{{ site1.ocp_api_key }}", namespace: "{{ site2.locations[0].namespace }}", clusterName: "{{ site2.locations[0].clusterName }}", local: "{{ site1.local }}", locations: "{{ site1.locations }}"}
        - {host: "{{ site2_ocp_api_url }}", api_key: "{{ site2.ocp_api_key }}", namespace: "{{ site1.locations[0].namespace }}", clusterName: "{{ site1.locations[0].clusterName }}", local: "{{ site2.local }}", locations: "{{ site2.locations }}"}
