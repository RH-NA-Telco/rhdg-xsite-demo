- name: Create the k8s namespace for RHDG XSite Demo
  community.kubernetes.k8s:
    api_version: v1
    state: present
    host: "{{ item.host }}"
    api_key: "{{ item.api_key }}"
    validate_certs: false
    definition: "{{ lookup('template', 'namespace.yml.j2') | from_yaml }}"
  loop:
    - {host: "{{ site1.ocp_api_url }}", api_key: "{{ site1.ocp_api_token }}"}
    - {host: "{{ site2.ocp_api_url }}", api_key: "{{ site2.ocp_api_token }}"}

- name: Create the site service account in the given namespace
  community.kubernetes.k8s:
    state: present
    host: "{{ item.host }}"
    api_key: "{{ item.api_key }}"
    validate_certs: false
    definition: "{{ lookup('template', 'serviceaccount.yml.j2') | from_yaml }}"
  loop:
    - {name: "{{ site1.local.name }}", host: "{{ site1.ocp_api_url }}", api_key: "{{ site1.ocp_api_token }}"}
    - {name: "{{ site2.local.name }}", host: "{{ site2.ocp_api_url }}", api_key: "{{ site2.ocp_api_token }}"}

- name: Get site1 secrets
  community.kubernetes.k8s_info:
    host: "{{ site1.ocp_api_url }}"
    api_key: "{{ site1.ocp_api_token }}"
    namespace: "{{ common_namespace }}"
    validate_certs: false
    kind: Secret
  register: site1_secrets

- name: Get site2 secrets
  community.kubernetes.k8s_info:
    host: "{{ site2.ocp_api_url }}"
    api_key: "{{ site2.ocp_api_token }}"
    namespace: "{{ common_namespace }}"
    validate_certs: false
    kind: Secret
  register: site2_secrets

- name: Display both site secrets
  debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
    - site1_secrets
    - site2_secrets

- name: Get the site1 sa secret name
  set_fact:
    site1_sa_token_secret: "{{ item.metadata.name }}"
  loop: "{{ site1_secrets.resources }}"
  when: '"site1-token" in item.metadata.name'

- name: Get the site2 sa secret name
  set_fact:
    site2_sa_token_secret: "{{ item.metadata.name }}"
  loop: "{{ site2_secrets.resources }}"
  when: '"site2-token" in item.metadata.name'

- name: Display token secret name
  debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
    - site1_sa_token_secret
    - site2_sa_token_secret

- name: Get the site1 sa token secret
  community.kubernetes.k8s_info:
    api_version: v1
    host: "{{ site1.ocp_api_url }}"
    api_key: "{{ site1.ocp_api_token }}"
    validate_certs: false
    kind: Secret
    name: "{{ site1_sa_token_secret }}"
    namespace: "{{ common_namespace }}"
  register: site1_sa_token_secret_json

- name: Get the site2 sa token secret
  community.kubernetes.k8s_info:
    api_version: v1
    host: "{{ site2.ocp_api_url }}"
    validate_certs: false
    api_key: "{{ site2.ocp_api_token }}"
    kind: Secret
    name: "{{ site2_sa_token_secret }}"
    namespace: "{{ common_namespace }}"
  register: site2_sa_token_secret_json

- name: Display token secret json
  debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
    - site1_sa_token_secret_json
    - site2_sa_token_secret_json

- name: Set the site1 sa token
  set_fact:
    site1_sa_token: "{{ site1_sa_token_secret_json.resources[0].data.token }}"

- name: Set the site2 sa token
  set_fact:
    site2_sa_token: "{{ site2_sa_token_secret_json.resources[0].data.token }}"

- name: Display tokens
  debug:
    var: "{{ item }}"
    verbosity: 1
  loop:
    - site1_sa_token
    - site2_sa_token

- name: Deploy token to the other site
  community.kubernetes.k8s:
    state: present
    host: "{{ item.host }}"
    api_key: "{{ item.api_key }}"
    validate_certs: false
    definition: "{{ lookup('template', 'secret.yml.j2') | from_yaml }}"
  loop:
    - {token: "{{ site2_sa_token }}", host: "{{ site1.ocp_api_url }}", api_key: "{{ site1.ocp_api_token }}"}
    - {token: "{{ site1_sa_token }}", host: "{{ site2.ocp_api_url }}", api_key: "{{ site2.ocp_api_token }}"}

- name: Apply view role to the service accounts
  community.kubernetes.k8s:
    state: present
    host: "{{ item.host }}"
    api_key: "{{ item.api_key }}"
    validate_certs: false
    definition: "{{ lookup('template', 'clusterroleview.yml.j2') | from_yaml }}"
  loop:
    - {name: "{{ site1.local.name }}", host: "{{ site1.ocp_api_url }}", api_key: "{{ site1.ocp_api_token }}"}
    - {name: "{{ site2.local.name }}", host: "{{ site2.ocp_api_url }}", api_key: "{{ site2.ocp_api_token }}"}

- name: Apply cluster-reader role to the service accounts
  community.kubernetes.k8s:
    state: present
    host: "{{ item.host }}"
    api_key: "{{ item.api_key }}"
    validate_certs: false
    definition: "{{ lookup('template', 'clusterroleclusterreader.yml.j2') | from_yaml }}"
  loop:
    - {name: "{{ site1.local.name }}", host: "{{ site1.ocp_api_url }}", api_key: "{{ site1.ocp_api_token }}"}
    - {name: "{{ site2.local.name }}", host: "{{ site2.ocp_api_url }}", api_key: "{{ site2.ocp_api_token }}"}

- name: Deploy datagrid operator on both clusters
  community.kubernetes.k8s:
    state: present
    host: "{{ item.host }}"
    api_key: "{{ item.api_key }}"
    validate_certs: false
    wait: true
    wait_condition:
      reason: AllCatalogSourcesHealthy
    definition: "{{ lookup('template', 'subscription.yml.j2') | from_yaml }}"
  loop:
    - {host: "{{ site1.ocp_api_url }}", api_key: "{{ site1.ocp_api_token }}"}
    - {host: "{{ site2.ocp_api_url }}", api_key: "{{ site2.ocp_api_token }}"}

- name: Deploy Infinispan CR
  include_tasks: deploy-infinispan-cr-async.yml
  loop:
    - {host: "{{ site1.ocp_api_url }}", api_key: "{{ site1.ocp_api_token }}", local: "{{ site1.local }}", locations: "{{ site1.locations }}"}
    - {host: "{{ site2.ocp_api_url }}", api_key: "{{ site2.ocp_api_token }}", local: "{{ site2.local }}", locations: "{{ site2.locations }}"}

- name: Deploy Infinispan Cache
  include_tasks: deploy-infinispan-cache.yml
  loop:
    - {host: "{{ site1.ocp_api_url }}", api_key: "{{ site1.ocp_api_token }}", backup_site_name: "{{ site2.local.name }}"}
    - {host: "{{ site2.ocp_api_url }}", api_key: "{{ site2.ocp_api_token }}", backup_site_name: "{{ site1.local.name }}"}
